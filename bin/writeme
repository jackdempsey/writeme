#!/usr/bin/env ruby

require 'pp'
require 'rubygems'
require 'thor'
require 'ruby-debug'
require 'liquid'
require 'active_support/core_ext/hash/keys'

$:.unshift File.expand_path(File.join('..','..','lib'), __FILE__)
require 'writeme'

class WritemeRunner < Thor
  def initialize(*)
    super
    @filename = Writeme.output_filename
    @output_type = :text
    @content = ''
  end

  # commands
  map ["-v", "--version"] => :version
  map ["-g", "--generate"] => :generate

  desc 'generate', 'generate a README'
  def generate(name)
    puts "Generating README for #{name}"
    # merge with defaults
    @template = Liquid::Template.parse("templates/README") # read in appropriate template
    @content = @template.render(data.stringify_keys)

    # figure out output format and thus which template to read
    File.open(@filename, 'wb') { |f| f << @content }
  end

  desc 'version', "print the current version for writeme"
  def version
    puts "writeme version #{Writeme::VERSION}"
  end

  def help
    puts %{
Usage:
  writeme [options]

Options:
  -v, [--version]  # Show Writeme version number and quit
  -h, [--help]     # Show this help message and quit
    }
  end

  def method_missing(*args)
    if args.size == 1
      # they're passing in the project name
      generate(args[0])
    end
  end
end

WritemeRunner.start
